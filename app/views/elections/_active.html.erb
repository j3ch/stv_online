

  <script>
  function equalizeColumnHeight() {
    var maxHeight = 0;
    $(".column").each(function(ind, elem)
        {
            if ($(elem).height() > maxHeight)
                maxHeight = $(elem).height();
        }
    );

    $(".column").height(maxHeight);
  };

    function addItemToBallot( itemId, itemText )
    {
        // don't do anything if already added
        if ($(".ballot-entry[candidateId="+itemId+"]")[0] != undefined)
            return;

        // delete source item
        deleteCandidate(itemId);
       
        // add destination item 
        $ballotEntry = $( "<li class='ballot-entry'></li>" ).attr('candidateId', itemId).text( itemText ); 
        $removeButton = $("<span class='remove-button'>[X]</span>").click(function() { 
            removeSelection(itemId, itemText);
        });
       
        $removeButton.appendTo($ballotEntry);
        $ballotEntry.appendTo( $("#ballot ol") );
        equalizeColumnHeight();
    }

 

  $(function() {

    $( "#candidate-list li" ).draggable({

      appendTo: "body",
      helper: "clone",
    });

   $( "#ballot ol" ).droppable({

      activeClass: "ui-state-default",

      hoverClass: "ui-state-hover",

      accept: ":not(.ui-sortable-helper)",

      drop: function( event, ui ) {

        var candidateId = $(ui.draggable[0]).attr("candidateId");
        var candidateText = ui.draggable.text();


        addItemToBallot(candidateId, candidateText);

      }

    }).sortable({

      items: "li:not(.placeholder)",

      sort: function() {

        // gets added unintentionally by droppable interacting with sortable
        // using connectWithSortable fixes this, but doesn't allow you to customize active/hoverClass options
        $( this ).removeClass( "ui-state-default" );

      }

    });

  });

  function removeSelection(id, name)
  {
    var entry = $($(".ballot-entry[candidateId="+id+"]")[0]);

    // add back the candidate
    $("<li class='candidate-draggable'></li>").attr("candidateId", id)
        .html( name )
        .dblclick( function() {
            addItemToBallot(id, name);
         }) 
        .draggable({ appendTo: "body", helper: "clone" })
        .appendTo($("#candidate-list-ul"));

    entry.remove();
    
  }

  function deleteCandidate(cId)
  {
    $(".candidate-draggable[candidateID="+cId+"]").remove();

  }

  function reviewBallot()
  {
    $ids = [];
    $(".ballot-entry").each( function(ind, val) {
        $ids.push( $(val).attr('candidateId') );
    } );
    $("#ballotEntries").val( $ids.toString());
    $("#ballotForm").submit();
  }

  $(document).ready(function() {
    equalizeColumnHeight();
  });

  </script>


<body>

<div id="content-wrapper">
<%= form_for :ballot, url: ballot_index_path, :id => "ballotForm" do |f| %>
<div id="candidate-list" class="column">

  <h1>1. Candidates</h1>
  <div classs="description">Drag candidates onto your ballot</div>

  <div class="list-content">

    <ul id="candidate-list-ul">
      <% @election.candidates.each do |c| %>

      <li class="candidate-draggable" candidateId="<%= c.id %>" ondblclick="addItemToBallot(<%= c.id %>, '<%= c.name %>')" ><%= c.name %></li>

      <% end %>

    </ul>

  </div>

</div>

 

<div id="ballot" class="column">

  <h1>2. Your Ranked Ballot</h1>
  <div classs="description">Order the candidates by preference</div>

  <div class="list-content">

    <ol id="ballot-list">

    </ol>

  </div>

</div>





<div id="voter-info" class="column">

<h1>3. Your Info</h1>
<div><%= f.label :voterName, "Name: " %><%= f.text_field :voterName %></div>
<div><%= f.label :voterPass, "Password (optional): " %><%= f.password_field :voterPass %></div>

<%= f.hidden_field :ballotEntries, :id => "ballotEntries" %>
<%= f.hidden_field :electionId, :value => params[:id] %>
<div><%= submit_tag "Submit", :onclick =>"return reviewBallot();", :class => "submit-button" %>

</div>


<% end %>
</div>
</body>


